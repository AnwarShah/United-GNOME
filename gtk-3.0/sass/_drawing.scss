// generic drawing of more complex things


// ripple effect animations

@mixin entry($t, $fc: $alt_primary_color) {
//
// entry
//
// $t: entry type
// $fc: focus color
//

  @if $t == normal {

    border-image: none;
    background-color: $lighter_bg_color;
    color: if($fc == $alt_primary_color, $fg_color, $inverse_fg_color);
  }

  @if $t == focus {
    border-image: none;
  }

  @if $t == disabled {
    background-color: transparent;
    color: $disabled_fg_color;
  }

  @if $t == flat-normal {
    background-color: $lighter_bg_color;
    color: $fg_color;
  }

  @if $t == flat-focus {
  }

  @if $t == flat-disabled {
    background-color: transparent;
    color: $disabled_fg_color;
  }
}


@mixin button($t, $c: $lighter_bg_color) {
//
// button
//
// $t: button type
// $c: base color
//

  @if $t == normal {
    color: $fg_color;
  }

  @if $t == hover {
    color: $fg_color;
  }

  @if $t == active {
    color: $fg_color;
  }

  @if $t == disabled {
    background-color: transparent;
    color: if($c == $lighter_bg_color, $disabled_secondary_fg_color, $disabled_fg_color);
  }

  @if $t == checked {
    background-color: $alt_primary_color;
    color: $inverse_fg_color;
  }

  @if $t == checked-disabled {
    background-color: transparent;
    color: scale-alpha($alt_primary_color, $disabled_opacity);
  }

  @if $t == flat-normal {

  }

  @if $t == flat-hover {

  }

  @if $t == flat-active {

  }

  @if $t == flat-disabled {
    background-color: transparent;
    color: if($c == $lighter_bg_color,
              gtkalpha(currentColor, $secondary_opacity * $disabled_opacity),
              gtkalpha(currentColor, $disabled_opacity));
  }

  @if $t == flat-checked {
    color: $alt_primary_color;
  }

  @if $t == flat-checked-disabled {
    background-color: transparent;
    color: gtkalpha(currentColor, $disabled_opacity);
  }
}


@mixin overshoot($p) {
//
// overshoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_position: center $p;

  @if ($p == left) or ($p == right) {
    $_position: $p center;
  }

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}


@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_undershoot_color_dark: scale-alpha($fg_color, $lower_opacity);
  $_undershoot_color_light: scale-alpha($base_color, $lower_opacity);

  $_gradient_dir: left;
  $_dash_bg_size: 12px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: left $p;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 12px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p top;
  }

  background-color: transparent; // shouldn't be needed, but better to be sure

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
                                    $_undershoot_color_light 50%,
                                    $_undershoot_color_dark 50%);

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
}
