// still figuring out how to actually use this. i don't think it'll make sense specifying static types, maybe just make an anonymous type function kinda thing
// or maybe use stuff like type == dark if type == dark then darken instead of lighten or something. maybe if type == shadow-focus then let the inset $primary_color thing showon hover and focus?

@mixin entry($type, $_fg_color, $_bg_color) {
  $_fg_color: if($_fg_color == null, $fg_color, $_fg_color);
  $_bg_color: if($_bg_color == null, $bg_color, $_bg_color);

  color: $_fg_color;
  background-color: $_bg_color;
  transition: $shorter_transition;
  border-color: $border_color;

  &:hover image {
    color: $primary_color;
  }

  @if $type == normal {
    background-color: $lighter_bg_color;
  }

  @if $type == focus {
    &:not(spinbutton):focus {
      box-shadow: inset 0 0px 0px 1px $primary_color;

      image {
        color: $primary_color;
      }
    }
  }
}

@mixin button($type, $_fg_color, $_bg_color) {
  $_fg_color: if($_fg_color == null, $fg_color, $_fg_color);
  $_bg_color: if($_bg_color == null, $bg_color, $_bg_color);

  color: $_fg_color;
  background-color: $_bg_color;

  @if $type == text {
    &:hover {
      background-color: lighten($_bg_color, 10);

      @if $_bg_color == $transparent {
        color: $primary_color;
      }
    }

    &:disabled {
      background: transparentize($darker_bg_color, $higher_opacity);
      color: transparentize($fg_color, $disabled_opacity);
    }
  }

  @if $type == text-field {
    &:hover {
      color: $primary_color;
    }
  }

  @if $type == stackswitcher {
    &.text-button {
      background: purple;
    }

    &.text-button:checked {
      color: $primary_color;
      box-shadow: $border_shadow_bottom $primary_color;
    }
  }

  @if $type == alt-normal {
    color: $white;
    background: $accent_color;
  }

  @if $type == alt-hover {
    background-color: lighten($accent_color, 10);
  }

  @if $type == flat-normal {
    background-color: transparent;
  }

  @if $type == flat-hover {
    color: $primary_color;
  }

  @if $type == header-button-hover {
    color: $primary_color;
  }

  @if $type == header-button-checked {
    @include button(header-button-hover);
  }

  @if $type == flat-checked {
    @include button(flat-hover);
  }
}

@mixin overshoot($position) {
  @if $position == left or $position == right {}
}

@mixin undershoot($position) {
  @if $position == left or $position == right {}
}

@mixin button_animation($type) {
  @if $type == swipe-up-toggle {
    &:hover {
      background-size: 100% 200%;
      background-position: 0% 0%;
      background-image: linear-gradient(to bottom, $lightest_bg_color 50%, $primary_color 50%);
      box-shadow: $border_shadow_bottom $primary_color;

      label, image, arrow {
        color: $primary_color;
      }
    }

    &:active, &:checked {
      background-size: 100% 200%;
      background-position: 0% 100%;

      * {
        color: white;
      }
    }

    &:checked {
      &:hover {
        * {
          color: white;
        }
      }
    }

    &:disabled {
      &:checked {
        background-color: transparentize($primary_color, $higher_opacity);
        color: transparentize($fg_color, $disabled_opacity);
      }
    }
  }
}
