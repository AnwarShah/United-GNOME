// Drawing mixins

// generic drawing of more complex things

@function _widget_edge($c: $border_edge) {
  // outer highlight "used" on most widgets
  @if $c == none {
    @return none;
  }
  @else {
    @return 0 1px $c;
  }
}

@function _pressed_fg($c: $primary_color) {
  // returns pressed color
  @if $c == none {
    @return darken($primary_color, 5%);
  }
  @else {
    @return darken($c, 5%);
  }
}

// entries
@function entry_focus_border($fc: $primary_color) {
  @return $fc;
}

@function entry_focus_shadow($fc: $primary_color) {
  @return inset 0 0 0 1px $fc;
}

@mixin entry($t, $fc: $primary_color, $edge: none) {
  $_blank_edge: if($edge == none, none, 0 1px transparentize($edge, 1));
  $_entry_edge: if($edge == none, none, _widget_edge($edge));

  @if $t == normal {
    color: $fg_color;
    border-color: $border_color;
    background-color: $lighter_bg_color;

    // for the transition to work the number of shadows in different states needs to match, hence the transparent shadow here.
  }

  @if $t == focus {
    border-color: entry_focus_border($fc);
  }

  @if $t == insensitive {
    color: $disabled_fg_color;
    border-color: $border_color;
    background-color: $disabled_bg_color;
  }

  @if $t == osd {
    color: $fg_color;
    border-color: $border_color;
    background-color: transparentize(opacify($border_color, 1), 0.5);
    background-clip: padding-box;
  }

  @if $t == osd-focus {
    color: $fg_color;
    border-color: $primary_color;
    background-color: transparentize(opacify($border_color, 1), 0.5);
    background-clip: padding-box;
  }

  @if $t == osd-insensitive {
    color: $disabled_fg_color;
    border-color: $border_color;
    background-color: $disabled_bg_color;
    background-clip: padding-box;
  }
}

// buttons

@function _border_color($c, $darker: false) {
  @if $darker == true {
    @return darken($c, 30%);
  }
  @else {
    @return darken($c, 20%);
  }
}

@function _button_hilight_color($c) {
  //
  // calculate the right top hilight color for buttons
  //
  // $c: base color;
  //
  @if lightness($c) > 95% {
    @return white;
  }
  @else if lightness($c) > 90% {
    @return transparentize(white, 0.2);
  }
  @else if lightness($c) > 80% {
    @return transparentize(white, 0.4);
  }
  @else if lightness($c) > 50% {
    @return transparentize(white, 0.6);
  }
  @else if lightness($c) > 40% {
    @return transparentize(white, 0.8);
  }
  @else {
    @return transparentize(white, 0.95);
  }
}

@mixin button($t, $c: $lighter_bg_color, $tc: $fg_color, $edge: none) {
  $_hilight_color: _button_hilight_color($c);
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparentize($edge, 1)));

  @if $t == normal {
    color: if($c != $lighter_bg_color, white, $tc);
    background-color: $c;
    border-color: if($c != $lighter_bg_color, $c, $border_color);
    outline-color: transparentize($tc, 0.7);
  }
  @else if $t == hover {
    color: if($c == $lighter_bg_color, $primary_color, white);
    background-color: if($c != $lighter_bg_color, lighten($c, 7.5%), $c);

    @if $c != $lighter_bg_color {
      box-shadow: $shadow_1;
    }

    border-color: if($c != $lighter_bg_color, lighten($c, 5%), $border_color);
    outline-color: transparentize($tc, 0.7);
  }

  @if $t == normal-alt {
    color: $tc;
    outline-color: transparentize($tc, 0.7);
    border-color: if($c != $bg_color, _border_color($c, true), $border_color);
    background-color: $c;
  }
  @else if $t == hover-alt {
    color: $tc;
    outline-color: transparentize($tc, 0.7);
    border-color: if($c != $lighter_bg_color, lighten($c, 5%), $border_color);
    background-color: $c;
  }
  @else if $t == active {
    color: if($t != flat, white, _pressed_fg($primary_color));
    outline-color: transparentize($tc, 0.7);
    border-color: if($c != $lighter_bg_color, lighten($c, 5%), $border_color);
    background-color: if($c != $lighter_bg_color, darken($c, 6%), $primary_color);
  }
  @else if $t == insensitive {
    $_bg: if($c != $bg_color, mix($c, $base_color, 85%), $disabled_bg_color);

    label, & {
      color: if($tc != $fg_color, mix($tc, $_bg, 50%), $disabled_fg_color);
    }

    border-color: $border_color;
    background-color: $disabled_bg_color;
  }
  @else if $t == insensitive-active {
    $_bg: darken(mix($c, $base_color, 85%), 8%);
    $_bc: if($c != $bg_color, _border_color($c), transparent);

    label, & {
      color: if($c != $bg_color, mix($tc, $_bg, 60%), $disabled_fg_color);
    }

    border-color: $border_color;
    background-color: $_bg;
  }
  @else if $t == osd {
    $_bg: if($c != $bg_color, transparentize($c, 0.5), $bg_color);

    color: $fg_color;
    border-color: $border_color;
    background: $c;
    background-clip: padding-box;
    outline-color: transparentize($fg_color, 0.7);
  }
  @else if $t == osd-hover {
    $_bg: if($c != $bg_color, transparentize($c, 0.3), lighten($bg_color, 12%));

    image, label, arrow{color: $primary_color;}
    border-color: $border_color;
    background-color: $c;
    background-clip: padding-box;
    outline-color: transparentize($fg_color, 0.7);
  }
  @else if $t == osd-active {
    $_bg: if($c != $bg_color, $c, $border_color);

    image, label, arrow{color: $pressed_fg;}
    border-color: $border_color;
    background-color: $c;
    background-clip: padding-box;
    outline-color: transparentize($fg_color, 0.7);
  }
  @else if $t == osd-insensitive {
    color: $disabled_fg_color;
    border-color: transparent;
    background-color: disabled_bg_color;
    background-clip: padding-box;
  }
  @else if $t == undecorated {
    border-color: transparent;
    background-color: transparent;
  }
}

@mixin overshoot($p, $t: normal, $c: $primary_color) {
  $_small_gradient_length: 3%;
  $_big_gradient_length: 50%;

  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p == right or $p == left {
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: transparentize($c, 0.93);

  @if $c == $fg_color {
    $_small_gradient_color: darken($border_color, 10%);
    $_big_gradient_color: transparentize($fg_color, 0.93);
  }

  $_small_gradient: radial-gradient(farthest-side at $p, $_small_gradient_color 85%, transparentize($_small_gradient_color, 1));

  $_big_gradient: radial-gradient(farthest-side at $p, $_big_gradient_color, transparentize($_big_gradient_color, 1));

  @if $t == normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $p;
  background-color: transparent;

  // reset some properties to be sure to not inherit them somehow
  border: none;

  //

  //
}

@mixin undershoot($p) {
  //
  // undershoot
  //
  // $p: position
  //
  // possible $p values:
  // top, bottom, right, left
  //

  $_undershoot_color_dark: $primary_color;
  $_undershoot_color_light: $primary_color;

  $_gradient_dir: left;
  $_dash_bg_size: 10px 0px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: center $p;

  background-color: transparent;

  // shouldn't be needed, but better to be sure;

  @if $p == left or $p == right {
    $_gradient_dir: top;
    $_dash_bg_size: 0px 10px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p center;
  }

  background-image: linear-gradient(to $_gradient_dir, $_undershoot_color_light 50%, $_undershoot_color_dark 50%);
  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  border: none;
}
