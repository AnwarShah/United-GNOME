/************
 * Functions *
 ************/

@function _pressed_shade($bg) {
  // returns pressed/active shade
  @return darken($bg, 5%);
}

@function _hover_shade($bg) {
  // returns hover shade
  @return ligthen($bg, 5%);
}


/************
 * Entries *
 ************/
@function entry_focus_border($fc: $primary_color) {
  @return $fc;
}

@function entry_focus_shadow($fc: $primary_color) {
  @return inset 0 0 0 1px $fc;
}

@mixin entry($type, $fc: $primary_color, $edge: none) {
  @if $type == normal {
    color: $fg_color;
    border-color: $border_color;
    background-color: $lighter_bg_color;
  }

  @if $type == focus {
    border-color: entry_focus_border($fc);
  }

  @if $type == insensitive {
    color: $disabled_fg_color;
    border-color: $border_color;
    background-color: $disabled_bg_color;
  }

  @if $type == osd {
    color: $fg_color;
    border-color: $border_color;
    background-color: transparentize(opacify($border_color, 1), 0.5);
    background-clip: padding-box;
  }

  @if $type == osd-focus {
    color: $fg_color;
    border-color: $primary_color;
    background-color: transparentize(opacify($border_color, 1), 0.5);
    background-clip: padding-box;
  }

  @if $type == osd-insensitive {
    color: $disabled_fg_color;
    border-color: $border_color;
    background-color: $disabled_bg_color;
    background-clip: padding-box;
  }
}

/************
 * Buttons *
 ************/

@mixin button($type, $bg: $lighter_bg_color, $fg: $fg_color) {
  @if $type == normal {
    color: if($bg != $lighter_bg_color, white, $fg);
    background-color: $bg;
    border-color: if($bg != $lighter_bg_color, $bg, $border_color);
    outline-color: transparentize($fg, 0.7);
  }
  @else if $type == hover {
    color: if($bg != $lighter_bg_color, white, $primary_color);
    background-color: if($bg != $lighter_bg_color, _hover_shade($bg), $bg);
    border-color: if($bg != $lighter_bg_color, _hover_shade($bg), $border_color);
    outline-color: transparentize($fg, 0.7);
  }

  @else if $type == active {
    outline-color: transparentize($fg, 0.7);
    border-color: if($bg != $lighter_bg_color, _hover_shade($bg), $border_color);
    background-color: if($bg != $lighter_bg_color, darken($bg, 6%), $primary_color);

    image, label, arrow {
      color: if($type != flat, white, _pressed_shade($primary_color));
    }
  }
  @else if $type == checked {
    color: if($type != flat, white, _pressed_shade($primary_color));
    outline-color: transparentize($fg, 0.7);
    border-color: if($bg != $lighter_bg_color, _hover_shade($bg), $border_color);
    background-color: if($bg != $lighter_bg_color, darken($bg, 6%), $primary_color);

    &:hover {
      background-color: if($bg != $lighter_bg_color, darken($bg, 6%), _pressed_shade($primary_color));
    }

    &:active {
      background-color: if($bg != $lighter_bg_color, darken($bg, 6%), _pressed_shade($primary_color));

      image, label, arrow {
        color: if($type != flat, white, _pressed_shade($primary_color));
      }
    }
  }

  @if $type == normal-alt {
    color: $fg;
    outline-color: transparentize($fg, 0.7);
    border-color: if($bg != $bg_color, _border_color($bg, true), $border_color);
    background-color: $bg;
  }
  @else if $type == hover-alt {
    color: $fg;
    outline-color: transparentize($fg, 0.7);
    border-color: if($bg != $lighter_bg_color, _hover_shade($bg), $border_color);
    background-color: $bg;
  }

  @else if $type == insensitive {
    $_bg: if($bg != $bg_color, mix($bg, $base_color, 85%), $disabled_bg_color);

    label, & {
      color: if($fg != $fg_color, mix($fg, $_bg, 50%), $disabled_fg_color);
    }

    border-color: $border_color;
    background-color: $disabled_bg_color;
  }
  @else if $type == insensitive-active {
    $_bg: darken(mix($bg, $base_color, 85%), 8%);
    $_bc: if($bg != $bg_color, _border_color($bg), transparent);

    label, & {
      color: if($bg != $bg_color, mix($fg, $_bg, 60%), $disabled_fg_color);
    }

    border-color: $_bg;
    background-color: $_bg;
  }

  /************
   * OSD *
   ************/

  @else if $type == osd {
    $_bg: if($bg != $bg_color, transparentize($bg, 0.5), $bg_color);

    color: $fg_color;
    border-color: $border_color;
    background: $bg;
    background-clip: padding-box;
    outline-color: transparentize($fg_color, 0.7);
  }
  @else if $type == osd-hover {
    $_bg: if($bg != $bg_color, transparentize($bg, 0.3), lighten($bg_color, 12%));

    image, label, arrow {
      color: $primary_color;
    }

    border-color: $border_color;
    background-color: $bg;
    background-clip: padding-box;
    outline-color: transparentize($fg_color, 0.7);
  }
  @else if $type == osd-active {
    $_bg: if($bg != $bg_color, $bg, $border_color);

    image, label, arrow {
      color: $pressed_fg;
    }

    border-color: $border_color;
    background-color: $bg;
    background-clip: padding-box;
    outline-color: transparentize($fg_color, 0.7);
  }
  @else if $type == osd-insensitive {
    color: $disabled_fg_color;
    border-color: transparent;
    background-color: $disabled_bg_color;
    background-clip: padding-box;
  }

  /************
   * Flat Buttons *
   ************/

  @else if $type == flat {
    border-color: transparent;
    background-image: none;
    background-color: transparent;
  }
  @else if $type == flat-hover {
    image, label, arrow {
      color: $bg;
    }

    border-color: transparent;
    background-image: none;
    background-color: transparent;
  }
  @else if $type == flat-active {
    image, label, arrow {
      color: _pressed_shade($bg);
    }

    border-color: transparent;
    background-image: none;
    background-color: transparent;
  }
}

/************
 * Overshoot *
 ************/

@mixin overshoot($p, $type: normal, $bg: $primary_color) {
  $_small_gradient_length: 3%;
  $_big_gradient_length: 50%;

  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p == right or $p == left {
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $bg;
  $_big_gradient_color: transparentize($bg, 0.93);

  @if $bg == $fg_color {
    $_small_gradient_color: darken($border_color, 10%);
    $_big_gradient_color: transparentize($fg_color, 0.93);
  }

  $_small_gradient: radial-gradient(farthest-side at $p, $_small_gradient_color 85%, transparentize($_small_gradient_color, 1));

  $_big_gradient: radial-gradient(farthest-side at $p, $_big_gradient_color, transparentize($_big_gradient_color, 1));

  @if $type == normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $p;
  background-color: transparent;


  border: none;


}

/************
 * Undershoot *
 ************/

@mixin undershoot($p) {
  // $p: position
  // possible values: top, bottom, right, left

  $_undershoot_color_dark: $primary_color;
  $_undershoot_color_light: $primary_color;

  $_gradient_dir: left;
  $_dash_bg_size: 10px 0px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: center $p;

  background-color: transparent;   // shouldn't be needed, but better to be sure;

  @if $p == left or $p == right {
    $_gradient_dir: top;
    $_dash_bg_size: 0px 10px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p center;
  }

  background-image: linear-gradient(to $_gradient_dir, $_undershoot_color_light 50%, $_undershoot_color_dark 50%);
  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  border: none;
}
